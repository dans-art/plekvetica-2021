"use strict";

// @koala-append "components/plek-language.js"
// @koala-append "components/event-handler.js"
// @koala-append "components/error-handler.js"
// @koala-append "components/validator-handler.js"
// @koala-append "components/compare-algorithm.js"
// @koala-append "components/search-handler.js"
// @koala-append "components/template-handler.js"

//Global Options
var $ = jQuery;
var flatpickr_options = { "locale": "de", enableTime: true, dateFormat: "d-m-Y H:i:S", altInput: true, altFormat: "j. F Y - H:i" };

$(document).ready(function () {
    console.log("Ready!");

    
        ajaxPreloader('bands');
        ajaxPreloader('venues');
    

    //Load the Flatpicker
    flatpickr("#event_start_date", flatpickr_options);
    flatpickr("#event_end_date", flatpickr_options);

    //Event Listener
    //Date-Time
    jQuery('#is_multiday').click(function () {
        if (jQuery(this).is(':checked')) {
            show_end_date();
        } else {
            hide_end_date();
        }
    });

    jQuery('#no_band').click(function () {
        if (jQuery(this).is(':checked')) {
            disable_band_input();
            plekevent.remove_all_items('event-band-selection');
        } else {
            enable_band_input();
        }
    });
    
    jQuery('#event_start_date').change(function () {
        var start_date = jQuery('#event_start_date').val();
        var end_options = flatpickr_options;
        end_options['minDate'] = start_date;
        flatpickr("#event_end_date", end_options);
    });

    jQuery('#plek-submit').click(function(event){
        event.preventDefault();
        jQuery(this).prop( "disabled", true );
        var type = jQuery(this).data( "type");
        window.plekevent.save_event(type);
    });

    /** Display and posistion the Output container */
    jQuery('.plek-search-input').focus(function(element){
        plektemplate.hide_overlay();
        plektemplate.show_overlay(this);
    });

    jQuery('.plek-search-input').keyup(function(element){
        var input_length = jQuery(this).val().length;
        if( input_length === 0){
            window.plektemplate.hide_overlay();
            return;
        }
        pleksearch.fire_search(this);
    });
});



function ajaxPreloader(type) {
    var datab = new FormData();
    datab.append('action', 'plek_ajax_event_form');
    datab.append('type', 'get_' + type);
    jQuery.ajax({
        url: window.ajaxurl,
        data: datab,
        type: 'POST',
        cache: false,
        processData: false,
        contentType: false,
        success: function success(data) {
            if (data.length < 2) {
                toastr["error"](pleklang.loaderror + ': ' + type, "Error");
                return false;
            } else {
                var jdata = JSON.parse(data);
                console.log(type + "-Data loaded (" + Object.keys(jdata).length + ")");
                if(type === 'bands'){
                    window.bandPreloadedData = jdata;
                    return;
                }else if(type === 'venues'){
                    window.venuePreloadedData = jdata;
                    return;
                }
                else{
                    return false;
                }
            }
        },
        error: function error(data) {
            window.plekerror.display_info(window.pleklang.loaderror + ': ' + data, "Error");
            return false;
        }
    });
}

function show_end_date() {
    jQuery('.plek-multi-date').show();
    return;
}

function hide_end_date() {
    jQuery('.plek-multi-date').hide();
    return;
}

function disable_band_input(){
    jQuery('input#event_band').prop( "disabled", true );
    jQuery('.event-search-bar-container plek-button').addClass( "disabled");
    jQuery('.event-search-bar-container #event_band').addClass( "disabled");
    jQuery('.event-band-selection').hide();
}
function enable_band_input(){
    jQuery('input#event_band').prop( "disabled", false );
    jQuery('.event-search-bar-container plek-button').removeClass( "disabled");
    jQuery('.event-search-bar-container #event_band').removeClass( "disabled");
    jQuery('.event-band-selection').show();
}



/**
 * Error Handling Object
 */
 var pleklang = {
    loaderror : "Fehler beim Laden der Daten.",
}

/**
 * Event Handling Object
 */
var plekevent = {

    existing_event: null,

    check_existing_event() {
            if (this.get_field_value('event_start_date') !== "") {
                //ajax call for checking
                var datab = new FormData();
                datab.append('action', 'plek_ajax_event_form');
                datab.append('type', 'check_event_duplicate');
                datab.append('start_date', this.get_field_value('event_start_date'));
                datab.append('band_ids', JSON.stringify(this.get_field_value('bands')));
                console.log(datab);
                jQuery.ajax({
                    url: window.ajaxurl,
                    data: datab,
                    type: 'POST',
                    cache: false,
                    processData: false,
                    contentType: false,
                    success: function success(data) {
                        var jdata = JSON.parse(data);
                        if (jdata.error !== '') {
                            window.plekerror.display_info('Achtung', jdata.error);
                            this.existing_event = true;
                            console.log("Event Existiert beriets");
                            return true;
                        } else {
                            this.existing_event = false;
                            console.log("Event existiert nicht");
                            return false;
                        }
                    },
                    error: function error(data) {
                        window.plekerror.display_info(window.pleklang.loaderror + ': ' + data, "Error");
                        return false;
                    }
                });
            }
            return null;
    },

    add_item_to_selection(element) {
        var item_for = jQuery(element).data('for');
        var type = jQuery(element).data('type');
        var item_id = jQuery(element).data('id');
        var html = jQuery(element).html();
        var data = { id: item_id, name: html }
        jQuery('#' + item_for).append(plektemplate.get_item_to_add(data));
        plektemplate.hide_overlay();
        jQuery('#' + type).val("");
        plekevent.add_remove_item_eventlistener();

        if (type === 'event_band') {
            window.plekevent.check_existing_event();
        }
    },

    add_remove_item_eventlistener() {
        jQuery('.remove-item').click(function () {
            jQuery(this).parent().parent().remove();
        });
    },
    remove_all_items(selector) {
        jQuery('#' + selector + ' .item').remove();
    },

    save_event(type) {
        console.log("save"+type);

        if (!plekvalidator.validate_data()) {
            jQuery('#plek-submit').prop("disabled", false); //Enable the button again.
            return false;
        }
        //Validation was ok, send it to the server
        var datab = this.prepare_data(type);
                jQuery.ajax({
                    url: window.ajaxurl,
                    data: datab,
                    type: 'POST',
                    cache: false,
                    processData: false,
                    contentType: false,
                    success: function success(data) {

                        //Only for testing, move on production to error handling part
                        jQuery('#plek-submit').prop("disabled", false); //Enable the button again.
                        
                        var jdata = JSON.parse(data);
                        if (jdata.error !== '') {
                            window.plekerror.display_info('Achtung', jdata.error);
                            this.existing_event = true;
                            console.log("Event Existiert beriets");
                            return true;
                        } else {
                            this.existing_event = false;
                            console.log("Event existiert nicht");
                            return false;
                        }
                    },
                    error: function error(data) {
                        window.plekerror.display_info(window.pleklang.loaderror + ': ' + data, "Error");
                        return false;
                    }
                });
        
    },
    prepare_data(type){
        var datab = new FormData();
        datab.append('action', 'plek_ajax_event_form');
        datab.append('type', type);
        if(type === "save_basic_event"){
            //Fields for Event Basic
            datab.append('name', this.get_field_value('event_name'));
            datab.append('start_date', this.get_field_value('event_start_date'));
            if(jQuery('#is_multiday').is(':checked')){
                datab.append('end_date', this.get_field_value('event_end_date'));
            }
            datab.append('band_ids', JSON.stringify(this.get_field_value('bands')));
            datab.append('venue', this.get_field_value('venue'));
            datab.append('description', this.get_field_value('event_description'));
        }

        return datab;
    },

    get_field_value(name) {
        switch (name) {
            case 'bands':
                return this.get_selector_ids('event-band-selection');
                break;
            case 'venue':
                return this.get_selector_ids('event-venue-selection');
                break;

            default:
                return jQuery('#' + name).val();
                break;
        }
    },

    get_selector_ids(selector_id) {
        var ids = [];
        var items = jQuery('#' + selector_id).find('.plek-select-item');
        jQuery.each(items, function (key, val) {
            var id = jQuery(val).data('id');
            ids.push(id);
        });
        if(ids.length === 1){
            return ids[0];
        }
        return ids;
    }
}

/**
 * Error Handling Object
 */
 var plekerror = {
    display_error(field, message){
        console.log(field);
        console.log(message);
        toastr.error(field,message);
    },
    display_info(field, message){
        console.log(field);
        console.log(message);
        toastr.info(field,message);
    }
}

/**
 * Validator for From
 * 
 */
var plekvalidator = {
    validate_data(){
        plekerror.display_error('Validator', 'Nicht validiert!');
        return true;
    }
}

"use strict";

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

var evaluation = function evaluation(charX, charY, costs) {
  return charX == charY ? costs.match : costs.mismatch;
}; // evaluation function


var createMatrix = function createMatrix(length1, length2) {
  return _toConsumableArray(new Array(length1)).map(function (a) {
    return _toConsumableArray(new Array(length2)).map(function (b) {
      return 1;
    });
  });
};

var initXAxis = function initXAxis(fields, value) {
  return fields.map(function (field, i) {
    return !i ? field.map(function (d) {
      return value;
    }) : field;
  });
};

var initYAxis = function initYAxis(fields, value) {
  return fields.map(function (xAxis) {
    return xAxis.map(function (yAxis, axisIndex) {
      return axisIndex === 0 ? value : 0;
    });
  });
};

var tracebackDirectionHash = ['d', 'u', 'l'];

var F = function F(i, j, ma, costs) {
  var tracebackPoint = ''; // console.log(ma.matches, i, j)
  // console.log(ma.sequence[i - 1], ma.pattern[j - 1])

  var matches = [+ma.matches[j - 1][i - 1] + evaluation(ma.sequence[i - 1], ma.pattern[j - 1], costs), +ma.matches[j - 1][i] + costs.gap, +ma.matches[j][i - 1] + costs.gap]; // Hole den besten Match

  var bestMatch = Math.max.apply(Math, matches); // Falls es mehrere gleichwertige Matches gibt und der diagonale dabei ist, wähle diesen aus, sonst wähle den
  // mit dem besten Match

  if (matches.filter(function (e) {
    return bestMatch === e;
  }).length > 1 && matches[0] === bestMatch && bestMatch > 0) tracebackPoint = tracebackDirectionHash[0]; // Diagonal
  else if (matches.filter(function (e) {
      return bestMatch === e;
    }).length == 1 && bestMatch > 0) tracebackPoint = tracebackDirectionHash[matches.indexOf(bestMatch)];else if (bestMatch <= 0) {
      tracebackPoint = 0;
      bestMatch = 0;
    }
  return [bestMatch, tracebackPoint];
};

var matrix = function matrix(seq, pattern) {
  return {
    'sequence': seq,
    'pattern': pattern,
    'matches': createMatrix(pattern.length + 1, seq.length + 1),
    'traceback': createMatrix(pattern.length + 1, seq.length + 1),
    'peak': {
      'cell': {},
      'value': 0
    },
    'initalizeMatrix': function initalizeMatrix() {
      this.matches = initXAxis(initYAxis(this.matches, 0), 0);
      this.traceback = initXAxis(initYAxis(this.matches, 0), 0);
      this.traceback[0][0] = 0;
    },
    'computeScore': function computeScore(costs) {
      var _this = this;

      var tracebackMatrix = this.traceback;
      this.traceback = tracebackMatrix.map(function (row, yIndex) {
        if (yIndex === 0) return row;
        return row.map(function (element, xIndex) {
          if (xIndex === 0) return element;
          var field = F(xIndex, yIndex, _this, costs);

          if (_this.peak['value'] <= field[0]) {
            _this.peak['cell'] = {
              x: +xIndex,
              y: +yIndex
            };
            _this.peak['value'] = field[0];
          }

          _this.matches[yIndex][xIndex] = field[0]; // match

          return field[1]; // traceback
        });
      });
    },
    'trace': [],
    'getTrace': function getTrace() {
      var it = 0;
      if(typeof 'assign' === 'function'){
            console.log("hat assign");
      }
      //var activeCell = Object.assign({}, this.peak['cell']);
      var activeCell = $.extend({}, this.peak['cell']);

      while (this.traceback[activeCell['y']][activeCell['x']] !== 0) {
        if (it > 20) break;
        it += 1;

        if (this.traceback[activeCell['y']][activeCell['x']] === 'd') {
          this.trace.push({
            'seqChar': this.sequence[activeCell['x'] - 1],
            'patChar': this.pattern[activeCell['y'] - 1],
            'seqIndex': activeCell['x'],
            'patIndex': activeCell['y']
          });
          activeCell['x'] -= 1;
          activeCell['y'] -= 1;
        } else if (this.traceback[activeCell['y']][activeCell['x']] === 'u') {
          this.trace.push({
            'seqChar': "-",
            'patChar': this.pattern[activeCell['y'] - 1],
            'seqIndex': activeCell['x'],
            'patIndex': activeCell['y']
          });
          activeCell['x'] -= 1;
        } else if (this.traceback[activeCell['y']][activeCell['x']] === 'l') {
          this.trace.push({
            'seqChar': this.sequence[activeCell['x'] - 1],
            'patChar': '-',
            'seqIndex': activeCell['x'],
            'patIndex': activeCell['y']
          });
          activeCell['y'] -= 1;
        }
      }
    }
  };
};

var smith_waterman = function smith_waterman(text, pattern, costs) {
  var M = matrix(text, pattern);
  M.initalizeMatrix();
  M.computeScore(costs);
  M.getTrace();
  return M;
};

/**
 * Validator for From
 * 
 */
var pleksearch = {

  current_type: null,
  treshhold: 60,

  fire_search(element) {
    var search_field_id = jQuery(element).attr('id');
    var type = jQuery('#' + search_field_id).attr('name');
    var result_con = jQuery('#'+type+'_overlay');
    this.set_type_settings(type);

    if (result_con.length == 0) {
      plekerror.display_error('No Result Container found.');
      return;
    }
    result_con.html("<div class='item'><span class='plek_loading'></span>&nbsp;Lade Ergebnise....</div>");
    var tout = window.plekTimeout;
    window.clearTimeout(tout);
    window.plekTimeout = window.setTimeout(function () {
      window.pleksearch.search(search_field_id).then(function (findings) {
        result_con.html(pleksearch.display_results(findings));
        window.pleksearch.add_item_Eventlistener();
      });
    }, 500);
  },

  set_type_settings(type) {
    window.pleksearch.current_type = type;

    switch (type) {
      case 'event_venue':
        window.pleksearch.threshhold = 40;
        break;
      case 'event_band':
        window.pleksearch.threshhold = 60;
        break;

      default:
        break;
    }
    return;
  },

  display_results(result_object) {
    var result = '';
    var total = Object.keys(result_object).length;
    result = plektemplate.load_search_overlay_header(total);
    jQuery.each(result_object, function (key, value) {
      var type = window.pleksearch.current_type;
      switch (type) {
        case 'event_band':
          result += plektemplate.load_band_item_template(value.data);
          break;
        case 'event_venue':
          result += plektemplate.load_venue_item_template(value.data);
          break;
        default:
          break;
      }
    });
    return result;
  },

  add_item_Eventlistener(){
      jQuery('.plek-add-item').click(function(element){
        window.plekevent.add_item_to_selection(this);
    });
  },

  async search(element) {
    var search_for = jQuery('#' + element).val();
    var search_for_prep = search_for.toLowerCase().replace(/[^a-z 0-9]/, '');
    var type = window.pleksearch.current_type;

    return pleksearch.get_preloaded_data(type).then(function (data) {
      var results = {};
      //Loop the data object
      jQuery.each(data, function (key, value) {
        var compare_prep = value.name.toLowerCase().replace(/[^a-z 0-9]/, '');
        var sm_compare = smith_waterman(search_for_prep, compare_prep, {
          'match': 10,
          'mismatch': -1,
          'gap': -1
        });
        var exact_hit = pleksearch.is_exact_hit(search_for_prep, compare_prep);
        if (sm_compare.peak.value >= window.pleksearch.threshhold || exact_hit > 0 || exact_hit === true) {
          console.log('compare: ' + compare_prep + ' :: ' + search_for_prep + ' - ' + sm_compare.peak.value + '%');
          var item = {};
          item.type = type;
          item.data = value;
          item.class = (exact_hit === true || sm_compare.peak.value === 100) ? 'exact-hit' : '';
          item.perc = (exact_hit === true) ? 100 : sm_compare.peak.value;
          results[value.id] = item;
        }
      });
      return new Promise(resolve => {
        resolve(pleksearch.sort_results(results));
      });
    });



  },
  sort_results(data) {
    var sorted = data;
    return sorted;
  },
  /**
   * 
   * @param {*} needle 
   * @param {*} haystack 
   * @returns false, if string was not found, >= 0 if string was found.
   */
  is_exact_hit(needle, haystack) {
    var exact_hit = haystack.search(needle); //Returns -1 if String is not found in compare
    if (exact_hit === 0 && haystack.length === needle.length || (needle === haystack)) {
      return true;

    }
    return exact_hit;
  },

  async get_preloaded_data(type) {

    return new Promise(resolve => {
      var data = this.get_preloaded_object(type);
      //data.length is bigger than 0
      resolve(data);


    });
    /*if(typeof data !== object){
      plekerror.display_info('Daten laden', 'Es werden noch daten geladen, bitte warten.');
      await setTimeout(get_preloaded_data(type),2000);
    }*/
  },

  get_preloaded_object(type) {
    if (type === 'event_band') {
      var data = window.bandPreloadedData;
    } else if (type === 'event_venue') {
      var data = window.venuePreloadedData;
    } else {
    }
    return data;
  },
}

/**
 * Validator for From
 * 
 */
var plektemplate = {
    load_template(template, val_object) {
        var output = template;
        con(`${template}`);
        jQuery.each(val_object, function (key, val) {
            output = output.replace('%%' + key + '%%', val);
        });
        return output;
    },
    load_band_item_template(data) {
        var flag = this.get_flag_image(data.flag);
        return `<div class='item plek-add-item' data-for='event-band-selection' data-type='event_band' data-id='${data.id}'>
        <div class='title'>
        <img src="${flag}"/>
        <span class='item-title'>${data.name}</span></div>
        <div class='subtitle'>${data.genres}</div>
        </div>`;
    },
    load_venue_item_template(data) {
        return `<div class='item plek-add-item' data-for='event-venue-selection' data-type='event_venue' data-id='${data.id}'>
        <div class='title'>
        <span class='item-title'>${data.name}</span></div>
        <div class='subtitle'>${data.address}, ${data.zip} ${data.city}<span class='country'>${data.country}</span></div>
        </div>`;
    },
    load_search_overlay_header(count) {
        return `<div class="overlay-header">Einträge gefunden: ${count}</div>`;
    },
    get_template(selector) {
        return jQuery(selector).get(0).outerHTML;
    },
    show_overlay(input) {
        var id_name = jQuery(input).attr('name');
        jQuery('#'+id_name+'_overlay').show();
        window.plektemplate.activate_overlay_background(input);

    },
    hide_overlay() {
        console.log("Hide Overlay");
        jQuery('.plek-search-overlay').hide();
        window.plektemplate.deactivate_overlay_background();
    },

    activate_overlay_background(input){
        var doc_height = jQuery(document).height();
        jQuery(input).css('z-index', 20);
        jQuery('.overlay_background').height(doc_height);
        jQuery('.overlay_background').click(function(){
            window.plektemplate.hide_overlay();
        });
    },
    deactivate_overlay_background(){
        jQuery('.overlay_background').height(0);
        jQuery('.overlay_background').off('click');
    },

    prepare_data(object) {
        console.log(object);
        var ret = new Object();
        ret.id = object.data.id;
        ret.name = object.data.name;
        ret.class = object.class;
        ret.genres = (typeof object.data.id !== 'undefined') ? object.data.id : '';
        ret.flag = (typeof object.data.flag !== 'undefined') ? this.get_flag_image(object.data.flag) : '';
        return ret;
    },
    get_flag_image(code) {
        if (code.length < 1) {
            return "";
        }
        return window.plek_plugin_dir_url + 'images/flags/' + code + '.png'
    },

    get_item_to_add(data) {
        return `<div class='item plek-select-item' data-id='${data.id}'>
            <div class='title'>
            <span class='remove-item'><i class="fas fa-times"></i></span>
            <span class='item-title'>${data.name}</span>
            </div>
        </div>`;
    }


}