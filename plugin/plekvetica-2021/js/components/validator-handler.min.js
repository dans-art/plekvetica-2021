var plekvalidator={fields:{},errors:{},error_messages:{},construct(){this.error_messages=this.default_error_messages(),console.log("validator loaded")},monitor_fields(){jQuery("input").on("change",e=>{var field_id=e.currentTarget.id,form=jQuery("#"+field_id).closest("form").attr("id"),value=e.currentTarget.value;setTimeout(()=>{this.check_monitored_field(field_id,value,form)},1e3)})},check_monitored_field(field_id,value,form){if(void 0!==plekvalidator.fields[form]&&void 0!==plekvalidator.fields[form][field_id]){let field_obj=plekvalidator.fields[form][field_id];"object"==typeof plekvalidator.errors[form]&&void 0!==plekvalidator.errors[form][field_id]&&delete plekvalidator.errors[form][field_id],!0!==plekvalidator.validate_field(field_id,field_obj.type,value,form)&&plekvalidator.display_errors(form,field_id)}},add_field(input_id,validator_type,allow_empty=!1,form="default"){"object"!=typeof input_id?(void 0===this.fields[form]&&(this.fields[form]={}),this.fields[form][input_id]={id:input_id,type:validator_type,allow_empty:allow_empty}):jQuery.each(input_id,(function(index,value){plekvalidator.add_field(value,validator_type,allow_empty,form)}))},add_invalid_field_values(input_id,values,form="default"){void 0!==this.fields[form][input_id]?this.fields[form][input_id].invalid_value=values:console.log("Could not add invalid value to field. Field not found: "+input_id)},add_error_messages(input_id,form="default",empty=null,invalid_type=null,not_a_number=null,to_long=null,to_short=null,not_allowed=null){let vali=plekvalidator.error_messages;this.fields[form][input_id].error_messages={empty:null===empty?vali.empty:empty,invalid_type:null===invalid_type?vali.invalid_type:invalid_type,nan:null===not_a_number?vali.not_a_number:not_a_number,to_long:null===to_long?vali.to_long:to_long,to_short:null===to_short?vali.to_short:to_short,not_allowed:null===not_allowed?vali.not_allowed:not_allowed}},default_error_messages:()=>({empty:__("Field cannot be empty","pleklang"),invalid_type:__("Input is not the correct type","pleklang"),nan:__("Input is not a Number","pleklang"),to_long:__("Input is to long","pleklang"),to_short:__("Input is to short","pleklang"),not_allowed:__("The provided value is not allowed, please change","pleklang"),nice_try:__("Nice try! No Robots allowed here!","pleklang")}),add_error(input_id,message,form="default"){void 0===this.errors[form]&&(this.errors[form]={}),"object"==typeof this.errors[form][input_id]?this.errors[form][input_id].push(message):this.errors[form][input_id]=[message]},display_errors(form="default",field_id=null){var errors=this.errors[form];if("object"!=typeof errors||0===Object.keys(errors).length)return null;jQuery.each(errors,(function(key,val){"object"==typeof val&&(null!==field_id&&key!==field_id||jQuery.each(val,(function(index,msg){plekerror.display_error(key,msg)})))}))},validate_form_data(data,form="default"){if(this.errors={},plekerror.clear_field_errors(),0===this.fields.length)return plekerror.display_error("Validator",__("No fields set","pleklang")),!1;for(var dataset of data.entries()){let val_fields=this.fields[form];if(void 0!==val_fields[dataset[0]]){var type=val_fields[dataset[0]].type;console.log("Check: "+dataset[0]);let field_id=dataset[0],value=dataset[1];this.validate_field(field_id,type,value,form)}else console.log(dataset[0]+" is not in validator set")}return!(Object.keys(this.errors).length>0)||(plekerror.display_error("Validator",__("Cannot save because of errors. Please check the fields again.","pleklang")),this.errors)},validate_field(field_id,type,value="",form="default",filter_value=!0){if("object"==typeof plekevent&&!0===filter_value)return value=plekevent.get_field_value(field_id),this.validate_field(field_id,type,value,form,!1);if("number"!=typeof value)try{var nv=JSON.parse(value);if(console.log("Validate_field try json"),console.log(nv),null!==nv&&"object"==typeof nv)return jQuery.each(nv,(function(key,val){plekvalidator.validate_field(field_id,type,val,form,!1)})),void console.log("skip validate")}catch(error){}console.log("Validator for: "+field_id),console.log(type),console.log(value);let val_fields=this.fields[form],error_msg=void 0!==val_fields[field_id].error_messages?val_fields[field_id].error_messages:this.default_error_messages();if("object"!=typeof val_fields[field_id].invalid_value&&"array"!=typeof val_fields[field_id].invalid_value||jQuery.each(val_fields[field_id].invalid_value,(function(index,val_invalid){if(val_invalid===value)return plekvalidator.add_error(field_id,error_msg.not_allowed,form),!1})),0===value.length)return!0===val_fields[field_id].allow_empty||(plekvalidator.add_error(field_id,error_msg.empty,form),!1);let reg_patern=null;switch(type){case"int":if(reg_patern=new RegExp("^[0-9]+$"),!1===reg_patern.test(value))return plekvalidator.add_error(field_id,error_msg.invalid_type,form),!1;break;case"price":if(reg_patern=new RegExp("^[0-9.-]+$"),!1===reg_patern.test(value))return plekvalidator.add_error(field_id,__("Field contains forbidden characters. Only Numbers, dots and dashes are allowed.","pleklang"),form),!1;break;case"honeypot":if(value.length>0)return plekvalidator.add_error(field_id,error_msg.nice_try,form),!1;break;case"url":if(-1===value.indexOf("https://")&&-1===value.indexOf("http://")&&-1===value.indexOf("www."))return plekvalidator.add_error(field_id,__("Please provide a valid URL. Must start with https:// or www.","pleklang"),form),!1}}};plekvalidator.construct();